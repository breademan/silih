DEF UI_RAMBANK EQU 1
DEF STOCK_RAMBANK EQU 7
DEF SCRATCH_RAMBANK EQU 7 ; When not running the ROM, this bank is unused, but will not retain data across handovers. This makes it perfect for storing large but temporary data.
DEF TEST_CALLER_RAMBANK EQU 3
DEF TEST_CALLEE_RAMBANK EQU 4
DEF BACKUP_BANK EQU 6 ; Also stores the alternative payload for the loader, so don't set it to 7, as the location corresponding to bank 7 won't fit in 32K ROM space.
DEF GRAPHICS_BANK EQU 2
DEF PRINTER_RAMBANK EQU 5
DEF SAVE_RAMBANK EQU 0 ; Currently the save RAMbank is held in unbanked WRAM. This may change.
;DEF INIT_RAMBANK EQU 2
DEF JOYPAD_DOWN EQU 7
DEF JOYPAD_UP EQU 6
DEF JOYPAD_LEFT EQU 5
DEF JOYPAD_RIGHT EQU 4
DEF JOYPAD_START EQU 3
DEF JOYPAD_SELECT EQU 2
DEF JOYPAD_B EQU 1
DEF JOYPAD_A EQU 0

DEF JOYPAD_DOWN_MASK EQU $01<<7
DEF JOYPAD_UP_MASK EQU $01<<6
DEF JOYPAD_LEFT_MASK EQU $01<<5
DEF JOYPAD_RIGHT_MASK EQU $01<<4
DEF JOYPAD_START_MASK EQU $01<<3
DEF JOYPAD_SELECT_MASK EQU $01<<2
DEF JOYPAD_B_MASK EQU $01<<1
DEF JOYPAD_A_MASK EQU $01<<0

DEF OAM_USED_AREA EQU 1 ; Length of the used OAM area in 4-byte entries
DEF OAM_USED_BYTES EQU OAM_USED_AREA*4

DEF BLANK_TILE_ID EQU $7F
DEF UI_ICONS_BASE_ID EQU $60

DEF ALPHABET_ID_BASE EQU 0
DEF ALPHABET_BLANK_TILE_ID EQU $1A

NEWCHARMAP ASCII
NEWCHARMAP SETTINGS_CHARMAP

CHARMAP "A",ALPHABET_ID_BASE+$00
CHARMAP "B",ALPHABET_ID_BASE+$01
CHARMAP "C",ALPHABET_ID_BASE+$02
CHARMAP "D",ALPHABET_ID_BASE+$03
CHARMAP "E",ALPHABET_ID_BASE+$04
CHARMAP "F",ALPHABET_ID_BASE+$05
CHARMAP "G",ALPHABET_ID_BASE+$06
CHARMAP "H",ALPHABET_ID_BASE+$07
CHARMAP "I",ALPHABET_ID_BASE+$08
CHARMAP "J",ALPHABET_ID_BASE+$09
CHARMAP "K",ALPHABET_ID_BASE+$0A
CHARMAP "L",ALPHABET_ID_BASE+$0B
CHARMAP "M",ALPHABET_ID_BASE+$0C
CHARMAP "N",ALPHABET_ID_BASE+$0D
CHARMAP "O",ALPHABET_ID_BASE+$0E
CHARMAP "P",ALPHABET_ID_BASE+$0F
CHARMAP "Q",ALPHABET_ID_BASE+$10
CHARMAP "R",ALPHABET_ID_BASE+$11
CHARMAP "S",ALPHABET_ID_BASE+$12
CHARMAP "T",ALPHABET_ID_BASE+$13
CHARMAP "U",ALPHABET_ID_BASE+$14
CHARMAP "V",ALPHABET_ID_BASE+$15
CHARMAP "W",ALPHABET_ID_BASE+$16
CHARMAP "X",ALPHABET_ID_BASE+$17
CHARMAP "Y",ALPHABET_ID_BASE+$18
CHARMAP "Z",ALPHABET_ID_BASE+$19
CHARMAP " ",ALPHABET_BLANK_TILE_ID
CHARMAP "0",UI_ICONS_BASE_ID
CHARMAP "1",UI_ICONS_BASE_ID+1
CHARMAP "2",UI_ICONS_BASE_ID+2
CHARMAP "3",UI_ICONS_BASE_ID+3
CHARMAP "4",UI_ICONS_BASE_ID+4
CHARMAP "5",UI_ICONS_BASE_ID+5
CHARMAP "6",UI_ICONS_BASE_ID+6
CHARMAP "7",UI_ICONS_BASE_ID+7
CHARMAP "8",UI_ICONS_BASE_ID+8
CHARMAP "9",UI_ICONS_BASE_ID+9
DEF CHECKBOX_TILE_ID_DIS EQU ALPHABET_ID_BASE+27
DEF CHECKBOX_TILE_ID_EN EQU ALPHABET_ID_BASE+28

DEF CAPTURE_TILEDATA_START EQU $8800     ;Start at $8800 so the entire area is contiguous so DMA transfers can work more simply.
DEF CAPTURE_TILEDATA_SIZE EQU $0E00
DEF CAPTURE_TILEDATA_END EQU CAPTURE_TILEDATA_START + CAPTURE_TILEDATA_SIZE - 1

DEF TILEMAP0_CAPTURE_ORIGIN EQU $9A44; $9800 + (18rows=$240) + 4
DEF TILEMAP_UI_ORIGIN_V EQU $9A40 ;9800 + 18 rows ($240) this DOESN'T include the 'corner' at the top left.
DEF TILEMAP_UI_ORIGIN_H EQU $99C0 ;$9800 + 14 rows -- this includes the 'edge' at the top left

;Set if the screen is flipped vertically
DEF SCREEN_FLIP_V EQU 0
;Set if the screen is flipped horizontally
DEF SCREEN_FLIP_H EQU 0

DEF MENU_STATE_CAMERA_OPTS EQU 0
DEF MENU_STATE_DITHER_OPTS EQU 1
DEF MENU_STATE_SELECTED EQU 2
DEF MENU_STATE_TAKE_CONFIRM EQU 3
DEF MENU_STATE_GALLERY EQU 4
DEF MENU_STATE_DELETE_CONFIRM EQU 5
DEF MENU_STATE_SETTINGS EQU 6
DEF MENU_STATE_BURST_SHOT EQU 7

DEF VF_STATE_IDLE EQU 0 ;DMA finished or init state: start a capture from here
DEF VF_STATE_CAPTURING EQU 1 ;Waiting on capture
DEF VF_STATE_DMA EQU 2 ;During a DMA
DEF VF_STATE_PAUSED EQU 3 ;Another screen is going, so don't do any of the viewfinder action/checks
DEF VF_STATE_TRANSITION EQU 4

DEF VF_ACTION_VIEWFINDER EQU 0
DEF VF_ACTION_TAKE_SINGLE EQU 1
DEF VF_ACTION_BURST EQU 2

DEF ACTION_TILES_ORIGIN_ADDR EQU $9200
DEF ACTION_TILES_ORIGIN_TILEID EQU (ACTION_TILES_ORIGIN_ADDR>>4)&$FF
DEF ACTION_SAVE EQU ACTION_TILES_ORIGIN_TILEID
DEF ACTION_TAKEPHOTO EQU ACTION_TILES_ORIGIN_TILEID+1
DEF ACTION_RETURN EQU ACTION_TILES_ORIGIN_TILEID+2
DEF ACTION_MODIFY EQU ACTION_TILES_ORIGIN_TILEID+3
DEF ACTION_HANDOVER EQU ACTION_TILES_ORIGIN_TILEID+4
DEF ACTION_OPTIONS EQU ACTION_TILES_ORIGIN_TILEID+5
DEF ACTION_OK EQU ACTION_TILES_ORIGIN_TILEID+6


DEF BUTTON_TILES_ORIGIN_ADDR EQU $9400
DEF BUTTON_TILES_ORIGIN_TILENUM EQU (BUTTON_TILES_ORIGIN_ADDR>>4)&$FF
DEF PROMPT_NO_DPAD EQU BUTTON_TILES_ORIGIN_TILENUM
DEF PROMPT_RIGHT EQU BUTTON_TILES_ORIGIN_TILENUM + 1
DEF PROMPT_DOWN EQU BUTTON_TILES_ORIGIN_TILENUM + 2
DEF PROMPT_LEFT EQU BUTTON_TILES_ORIGIN_TILENUM + 3
DEF PROMPT_UP EQU BUTTON_TILES_ORIGIN_TILENUM + 4
DEF PROMPT_NO_A EQU BUTTON_TILES_ORIGIN_TILENUM + 5
DEF PROMPT_A EQU BUTTON_TILES_ORIGIN_TILENUM + 6
DEF PROMPT_NO_B EQU BUTTON_TILES_ORIGIN_TILENUM + 7
DEF PROMPT_B EQU BUTTON_TILES_ORIGIN_TILENUM + 8
DEF PROMPT_NO_STARTSELECT EQU BUTTON_TILES_ORIGIN_TILENUM + 12
DEF PROMPT_SELECT EQU BUTTON_TILES_ORIGIN_TILENUM + 13
DEF PROMPT_START EQU BUTTON_TILES_ORIGIN_TILENUM + 14

DEF DECODING_MAX_VALUE EQU $5E

IF SCREEN_FLIP_H
DEF UpdateByteInTilemap_rotation EQUS "UpdateByteInTilemap_flipped"
ELSE
DEF UpdateByteInTilemap_rotation EQUS "UpdateByteInTilemap"
ENDC


DEF NUM_OBJ_PALETTES EQU 2
DEF NUM_BG_PALETTES EQU 3

DEF NUM_SETTINGS EQU 12
DEF NULL EQU 00

DEF TAKE_ACTION_SAVE EQU 0
DEF TAKE_ACTION_PRINT EQU 1
DEF TAKE_ACTION_SAVE_AND_PRINT EQU 2
DEF TAKE_ACTION_XFER EQU 3

DEF CAMERA_MODE_SINGLE EQU 0
DEF CAMERA_MODE_BURST EQU 1
DEF CAMERA_MODE_AEB EQU 2


DEF ROM_OAM_DMA_WAITLOOP_COUNT EQU $0D

DEF PRINTER_CMD_INIT EQU $01
DEF PRINTER_CMD_PRINT EQU $02
DEF PRINTER_CMD_DATA EQU $04
DEF PRINTER_CMD_STATUS EQU $0F
;Not a real printer command, unique to the Pico GB Printer's Transfer function
DEF PRINTER_CMD_TRANSFER EQU $10

DEF PRINTER_COMPRESSION_OFF EQU $00
DEF PRINTER_COMPRESSION_ON EQU $01